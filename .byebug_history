c
exit
params.fetch("tag_ids", [])
params
c
params
exit
params[:total_time]
params
exit
params["total_time"]
ChronicDuration.parse(params["total_time"])
params
exit
params
@total_time
exit
@total_time
c
@total_time
c
@total_time
c
@total_time
c
@total_time
c
@total_time
c
@total_time
c
@total_time
exit
response.body
c
search_params
c
@params
params
c
@params.name
@params ||= Hashie::Mash.new(name: params[:name])
c
exit
      name: params[:name])
 @params ||= Hashie::Mash.new(
    )
      ingredient_names: ingredient_names
      tag_ids: tag_ids,
      page: params[:page],
      sort_by: params[:sort_by],
      total_time: total_time,
      difficulty: params[:difficulty],
      budget: params[:budget],
      name: params[:name],
@params ||= Hashie::Mash.new(
params
exit
@params.name
@params = RecipeSearchParams.new(params).params
@params.name
@params = RecipeSearchParams.new(params).params
c
params
c
exit
ingredient_names
exit
ingredient_names
recipes = recipes.where('ingredients.name ILIKE ?', "%gambas%")
ingredient_names
recipes = joins(:ingredients)
c
ingredient_names
   30:       .where('ingredients.name ILIKE ALL (array[?])', ingredient_names.map { |name| "%#{name}%" })
joins(:ingredients)
ingredient_names
c
ingredient_names
exit
@name
exit
c
@ingredient_names
exit
@ingredient_names
exit
recipe_params.fetch("ingredient_names", [])
@ingredient_names.any?
exit
ingredient.errors
ingredient.save
ingredient.errors
ingredient.valid?
c
ChronicDuration.parse(recipe_params["total_time"])
recipe_params["total_time"]
exit
rate.blank?
rate
c
rate
c
rate
c
rate.to_f
rate
c
rate.to_f
rate
c
rate
c
recipes.to_sql
c
recipes.to_sql
c
recipe_params.fetch("ingredient_ids", []).compact_blank
recipe_params.fetch("tag_ids", []).compact_blank
c
recipe_params["difficulty"]
recipe_params["budget"]
recipe_params.fetch("ingredient_ids", []).compact_blank
recipe_params.fetch("tag_ids", []).compact_blank
recipe_params
c
recipe_params
c
exit
params.permit(:budget, :difficulty, :page, tag_ids: [], ingredient_ids: []).to_h.each(&:compact_blank)
    params.permit(:budget, :difficulty, :page, tag_ids: [], ingredient_ids: []).to_h.each(&:compact_blank)
params.permit(:budget, :difficulty, :page, tag_ids: [], ingredient_ids: []).to_h.compact_blank
params.permit(:budget, :difficulty, :page, tag_ids: [], ingredient_ids: []).to_h
params.permit(:budget, :difficulty, :page, tag_ids: [], ingredient_ids: [])
recipe_params
params
exit
recipe_params
c
recipe_params["tag_ids"].compact_blank
recipe_params
c
@tag_ids
c
@tag_ids.flatten
c
recipes.count
recipes = recipes.where(budget: @budget)
recipes.count
@budget
c
@page
recipes.count
exit
@tag_ids
exit
r.tags << tag
tag = Tag.find_or_create_by!(name: tag)
exit
RecipeTag.last
r.save!
r.valid?
r.tags << tag
tag = Tag.find_or_create_by!(name: tag)
exit
RecipeTag.count
r.save!
RecipeTag.count
r.tags << tag
r.tags
tag = Tag.find_or_create_by!(name: tag)
exit
r.errors.full_messages
r.errors
r.valid?
r.tags << tag
r.tags
r.valid?
tag.valid?
tag = Tag.find_or_create_by!(name: tag)
tag
exit
tag.valid?
r.errors
r.tags
r.save!
r.tags << tag
tag = Tag.find_or_create_by!(name: "CrÃªpe")
recipe["tags"]
exit
recipes.map { |r| r["difficulty"] }.uniq
exit
recipes.first["rate"]
recipes.count
recipes = JSON.parse(File.read(file_path))["recipes"]
file_path = Rails.root.join('db', 'recipes.json')
exit
recipes = JSON.parse(File.read(file_path))["recipes"]
file_path = Rails.root.join('db', 'recipes.json')
